.global _start
_start:
	ldr r0, =#5000000 // 1 seg ON; 1 seg OFF 200000000
	bl init_timer
	ldr r0, =#0xff200000 // LED address
	ldr r12, =#0xff200020 // seven segment display address
	ldr r11, =#HEX7SEG
	ldr r10, =#DIVISION
	ldr	r9,=0X0FF200040
	mov r1, #0
	mov r2, #0
	mov r3, #0
	mov r4, #0
	mov r5, #0
	mov r6, #0
	str r1, [r0]
	
clock:
	cmp r3, #24
	moveq r3 , #0
	bl wait_timer_restart
	mov r4, #0
	mov r7, #0
	bl division_M
	bl minute1
	mov r7, #1
	bl minute1
	mov r7, #2
	push {r1}
	mov r1, r3
	bl division_M
	bl minute1
	mov r7, #3
	bl minute1
	str r2, [r12]
	mov r2, #0
	pop {r1}
	add r1, #1
	cmp r1, #60
	moveq r1, #0
	addeq r3, #1
	cmp r3, #24
	moveq r3, #0
	
programming_mode:
	push {r10}
	ldr		r10, [r9]
	and		r10, #1
	cmp		r10, #0
	pop {r10}
	beq	clock
	bl get_keys
	cmp r0, #0
	beq programming_mode
	cmp r0, #1
	beq clock
	cmp r0, #2
	addeq r3, #1
	subeq r1, #1
	beq clock
	b	programming_mode
	
	
minute1:
	push {r11, r10, r6, r5}
	mov r6, #4
	mla r10, r7, r6, r10
	ldr r5, [r10]
	mla r11, r5, r6, r11
	ldr r5, [r11]
	mov r6, #8
	mul r6, r7
	lsl r5, r6
	add r2, r5
	pop {r11, r10, r6, r5}
	bx lr
	
division_M:
	push {r1,r5,r4,r10,r6}
	mov r6, #4
	mla r10, r6, r7, r10
division_loop_M:
	cmp r1, #10
	subge r1, #10
	addge r4, #1
	strlt r1, [r10]
	//cmp r5, #10
	bge division_loop_M
	mov r5, r5
	add r10, #4
	str r4, [r10]
	pop {r1,r5,r4,r10,r6}
division_end_M:
	bx lr
	
adder_M:
	cmp r0, #0
	bxeq lr
	cmp r0, #1
	addeq r5, #1
	cmp r0, #2
	addeq r6, #1
	bx lr
/*-----------------------------------------------------------------
init_timer:
Programa timer Cortex-A9 private Timer para auto-reload.
Valor de reload deve estar em r0
delay = 200e6MHz / r0 [seg]
------------------------------------------------------------------*/
init_timer:
	push {r0, r1}
	ldr r1, =0x0fffec600
	// reload em r0 p.e., r0=200000000 -- > 1 segundo
	str r0,[r1]
	ldr r1, =0x0fffec608
	ldr r0,=3 // 7 para interrupt; 3 autoreload
	str r0,[r1]
	pop {r0, r1}
	bx lr
/*-----------------------------------------------------------------
wait_timer_restart:
Espera até que timer venha a zero, e faz reload.
Deve ser usada função init_timer para configuração inicial.
------------------------------------------------------------------*/
wait_timer_restart:
	push {r0, r1}
	ldr r0, =0x0fffec60c // restart
counter_decreasing:
	ldr r1, [r0]
	tst r1, #0x01
	beq counter_decreasing
	mov r1, #1
	str r1, [r0] //ack and restart (r1 = 1)
	pop {r0, r1}
	bx lr
	
/*-----------------------------------------------------------------
get_keys:
 Devolve em r0 o status de pressão dos push buttons.
 Quando uma tecla é pressionada e largada, o bit correspondente
 é colocado a '1'
 A função faz o clear do status das teclas
------------------------------------------------------------------*/
get_keys:
 push {r1}

 ldr r1, =#0xFF200050 + 12 // base + 12 -> edge detection
 ldr r0, [r1]
 cmp r0, #0
 beq get_keys_end
 str r0, [r1] // clear if different from 0
get_keys_end:
 pop {r1}
 bx lr

HEX7SEG: .word 0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 0b01101101, 0b01111101, 0b00000111, 0b01111111, 0b01101111, 0b01110111, 0b01111100, 0b00111001, 0b01011110, 0b01111001, 0b01110001
DIVISION: .word 0, 0, 0, 0